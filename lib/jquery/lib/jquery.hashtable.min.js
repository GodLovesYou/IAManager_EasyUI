(function() {
	if(jQuery && typeof jQuery.Hashtable == "undefined") {
		jQuery.Hashtable = function() {
			this.items = new Array();
			this.itemsCount = 0;
			this.add = function(key, value) {
				if (!this.containsKey(key)) {
					this.items[key] = value;
					this.itemsCount++;
				}
				else
					throw "key '" + key + "' allready exists.";
			}
			this.get = function(key) {
				if (this.containsKey(key))
					return this.items[key];
				else
					return null;
			}

			this.remove = function(key) {
				if (this.containsKey(key)) {
					delete this.items[key];
					this.itemsCount--;
				}
				else
					throw "key '" + key + "' does not exists."
			}
			this.containsKey = function(key) {
				return typeof (this.items[key]) != "undefined";
			}
			this.containsValue = function containsValue(value) {
				for (var item in this.items) {
					if (this.items[item] == value)
						return true;
				}
				return false;
			}
			this.contains = function(keyOrValue) {
				return this.containsKey(keyOrValue) || this.containsValue(keyOrValue);
			}
			this.clear = function() {
				this.items = new Array();
				itemsCount = 0;
			}
			this.size = function() {
				return this.itemsCount;
			}
			this.isEmpty = function() {
				return this.size() == 0;
			}
			this.keys = function() {
				if(this.itemsCount <= 0) {
					return null;
				}
				var _keys = [];
				for(var item in this.items) {
					_keys.push(item);
				}
				return _keys;
			}
			this.values = function() {
				if(this.itemsCount <= 0) {
					return null;
				}
				var _values = [];
				for(var item in this.items) {
					_values.push(this.items[item]);
				}
				return _values;
			}
			// -> key<value>
			this.each = function(iterator) {
				if(this.itemsCount > 0) {
					var iterator = iterator || function(item, index) {};
					var index = 0;
					for(var item in this.items) {
						iterator.call((iterator || this), {key: item, value: this.items[item]}, index++);	
					}
					index = 0;
				}
			}
		}; 
	} 	
})();